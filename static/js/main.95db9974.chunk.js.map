{"version":3,"sources":["index.js"],"names":["Chat","props","handleCallback","FormData","setState","prevState","allMessage","state","this","timerID","setInterval","serverMessage","clearInterval","message","MessageList","dataParentToChild","Form","parentCallback","React","Component","onTrigger","event","value","preventDefault","handleChange","bind","target","id","onSubmit","placeholder","autoComplete","type","onChange","console","log","messagesList","map","Message","Date","ReactDOM","render","document","getElementById"],"mappings":"sOAOMA,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAMVC,eAAiB,SAACC,GACVA,GAIA,EAAKC,UAAS,SAAAC,GAAS,MAAK,CACxBC,WAAW,GAAD,mBAAMD,EAAUC,YAAhB,CAA4BH,SAX9C,EAAKI,MAAQ,CACTD,WAAW,IAHA,E,qDAkBnB,WAAqB,IAAD,OAChBE,KAAKC,QAAUC,aACX,kBAAM,EAAKC,kBACX,O,kCAGR,WACIC,cAAcJ,KAAKC,W,2BAGvB,WACID,KAAKJ,UAAS,SAAAC,GAAS,MAAK,CACxBC,WAAW,GAAD,mBAAMD,EAAUC,YAAhB,CAA4B,iB,oBAI9C,WACI,IAAIO,EAKJ,OAJIL,KAAKD,MAAMD,aACXO,EAAU,cAACC,EAAD,CAAaC,kBAAmBP,KAAKD,MAAMD,cAIrD,gCACI,cAACU,EAAD,CAAMC,eAAgBT,KAAKN,iBAC1BW,S,GA5CEK,IAAMC,WAkDnBH,E,kDACF,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IAMVmB,UAAY,SAACC,GACT,EAAKpB,MAAMgB,eAAe,EAAKV,MAAMe,OACrC,EAAKlB,SAAS,CAAEkB,MAAO,KACvBD,EAAME,kBARN,EAAKhB,MAAQ,CAAEe,MAAO,IACtB,EAAKE,aAAe,EAAKA,aAAaC,KAAlB,gBAHL,E,gDAMnB,SAAaJ,GAASb,KAAKJ,SAAS,CAAEkB,MAAOD,EAAMK,OAAOJ,U,oBAO1D,WACI,OACI,qBAAKK,GAAG,MAAR,SACI,uBAAMA,GAAG,OAAOC,SAAUpB,KAAKY,UAA/B,UACI,uBAAOO,GAAG,QAAQE,YAAY,eAAeC,aAAa,MAAMC,KAAK,OAAOT,MAAOd,KAAKD,MAAMe,MAAOU,SAAUxB,KAAKgB,eACpH,iCAAQ,cAAC,IAAD,e,GAnBTN,IAAMC,WA0BzB,SAASL,EAAYb,GACjBgC,QAAQC,IAAIjC,EAAMc,mBAClB,IACMoB,EADWlC,EAAMc,kBACOqB,KAAI,SAACvB,GAAD,OAE9B,aADA,CACCwB,EAAD,CAA0Bf,MAAOT,GAAnB,IAAIyB,SAGtB,OACI,oBAAIX,GAAG,WAAP,SACKQ,IAMb,SAASE,EAAQpC,GACb,OAAO,6BAAI,+BAAOA,EAAMqB,UAG5BiB,IAASC,OACL,cAACxC,EAAD,IACAyC,SAASC,eAAe,U","file":"static/js/main.95db9974.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n/* import React, { useState } from 'react'; */\r\nimport './index.css';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\n\r\n\r\nclass Chat extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allMessage:[]\r\n        };\r\n    }\r\n\r\n    handleCallback = (FormData) => {\r\n        if (FormData) {\r\n         /*    this.setState(prevState => ({\r\n                messageList: [...prevState.messageList, FormData]\r\n            })); */\r\n            this.setState(prevState => ({\r\n                allMessage: [...prevState.allMessage, FormData ]\r\n            }));\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.serverMessage(),\r\n            9000\r\n        );\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    serverMessage() {\r\n        this.setState(prevState => ({\r\n            allMessage: [...prevState.allMessage, 'Prueba' ]\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        let message;\r\n        if (this.state.allMessage) {\r\n            message = <MessageList dataParentToChild={this.state.allMessage} />;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Form parentCallback={this.handleCallback} />\r\n                {message}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Form extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '' };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) { this.setState({ value: event.target.value }); }\r\n    onTrigger = (event) => {\r\n        this.props.parentCallback(this.state.value);\r\n        this.setState({ value: '' });\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"box\">\r\n                <form id=\"form\" onSubmit={this.onTrigger}>\r\n                    <input id=\"input\" placeholder=\"Your message\" autoComplete=\"off\" type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n                    <button><SendRoundedIcon /></button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction MessageList(props) {\r\n    console.log(props.dataParentToChild);\r\n    const messages = props.dataParentToChild;\r\n    const messagesList = messages.map((message) =>\r\n        //key especificada dentro del array.    \r\n        <Message key={new Date()} value={message} />\r\n    );\r\n\r\n    return (\r\n        <ul id=\"messages\">\r\n            {messagesList}\r\n        </ul>\r\n    )\r\n}\r\n\r\n\r\nfunction Message(props) {\r\n    return <li><span>{props.value}</span></li>;\r\n}\r\n\r\nReactDOM.render(\r\n    <Chat />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}